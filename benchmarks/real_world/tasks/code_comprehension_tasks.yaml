# Real-World Code Comprehension Tasks for cs --hybrid Benchmark
# Inspired by semtools' question.txt design
#
# Each task represents a realistic coding task that a developer or AI agent
# would need to accomplish when working with an unfamiliar codebase.

# ============================================================================
# Category A: Simple Search & Discovery (Easy)
# ============================================================================

- id: comp-001
  category: simple_search
  difficulty: easy
  task: "Find all error handling patterns using Result type"
  query_en: "error handling Result type pattern"
  query_zh: "使用Result类型的错误处理模式"
  semantic_weight: high
  exact_match_weight: medium
  expected_files: 8-15
  ground_truth_files:
    - "cs-cli/src/main.rs"
    - "cs-models/src/user_config.rs"
    - "cs-embed/src/jina_api.rs"
    - "cs-engine/src/semantic_v3.rs"
  success_criteria:
    - "Finds at least 70% of ground truth files"
    - "No more than 30% false positives"
  baseline_expected_calls: 6-8
  cs_expected_calls: 1-2

- id: comp-002
  category: simple_search
  difficulty: easy
  task: "Locate the main configuration loading function"
  query_en: "configuration loading function load config toml"
  query_zh: "配置加载函数 load config"
  semantic_weight: high
  exact_match_weight: high
  expected_files: 1-3
  ground_truth_files:
    - "cs-models/src/user_config.rs"  # UserConfig::load()
  success_criteria:
    - "Finds UserConfig::load() method"
    - "Score > 0.8 for the main function"
  baseline_expected_calls: 3-5
  cs_expected_calls: 1

- id: comp-003
  category: simple_search
  difficulty: medium
  task: "Find all public API structures in the embedding module"
  query_en: "public struct API embedder embedding"
  query_zh: "公共嵌入API结构"
  semantic_weight: medium
  exact_match_weight: high
  expected_files: 3-5
  ground_truth_files:
    - "cs-embed/src/lib.rs"
    - "cs-embed/src/jina_api.rs"
    - "cs-embed/src/reranker.rs"
  success_criteria:
    - "Finds JinaApiEmbedder, Embedder trait, Reranker trait"
  baseline_expected_calls: 4-6
  cs_expected_calls: 1-2

- id: comp-004
  category: simple_search
  difficulty: easy
  task: "List all files containing version numbers 0.6.1"
  query_en: "version 0.6.1"
  query_zh: "版本号 0.6.1"
  semantic_weight: low
  exact_match_weight: very_high
  expected_files: 10-15
  ground_truth_files:
    - "Cargo.toml"
    - "cs-cli/Cargo.toml"
    - "cs-models/Cargo.toml"
    # ... all Cargo.toml files
  success_criteria:
    - "Finds all Cargo.toml files with version 0.6.1"
  baseline_expected_calls: 1-2
  cs_expected_calls: 1

- id: comp-005
  category: simple_search
  difficulty: medium
  task: "Find code that handles JINA_API_KEY environment variable"
  query_en: "JINA_API_KEY environment variable handling"
  query_zh: "JINA_API_KEY 环境变量处理"
  semantic_weight: high
  exact_match_weight: high
  expected_files: 2-4
  ground_truth_files:
    - "cs-embed/src/jina_api.rs"
    - "cs-embed/src/jina_api_reranker.rs"
  success_criteria:
    - "Finds API key loading code"
    - "Identifies error handling for missing key"
  baseline_expected_calls: 3-4
  cs_expected_calls: 1

# ============================================================================
# Category B: Cross-File Relationship Tracing (Medium-Hard)
# ============================================================================

- id: cross-001
  category: cross_file
  difficulty: hard
  task: "Trace the complete data flow for semantic search from CLI to results"
  query_en: "semantic search data flow entry point to results"
  query_zh: "语义搜索数据流从入口到结果"
  semantic_weight: very_high
  exact_match_weight: low
  cross_file: true
  iterative: true
  expected_files: 10-15
  ground_truth_files:
    - "cs-cli/src/main.rs"           # CLI entry
    - "cs-core/src/lib.rs"            # SearchOptions
    - "cs-engine/src/semantic_v3.rs"  # Semantic search impl
    - "cs-embed/src/lib.rs"           # Embedder
    - "cs-models/src/lib.rs"          # Model registry
  success_criteria:
    - "Traces complete call chain"
    - "Identifies all major components"
    - "Understands data transformations"
  baseline_expected_calls: 15-20
  cs_expected_calls: 4-6

- id: cross-002
  category: cross_file
  difficulty: medium
  task: "Find all implementations of the Embedder trait"
  query_en: "Embedder trait implementation impl"
  query_zh: "Embedder trait 的所有实现"
  semantic_weight: medium
  exact_match_weight: high
  cross_file: true
  expected_files: 3-5
  ground_truth_files:
    - "cs-embed/src/jina_api.rs"      # JinaApiEmbedder
    # Note: FastEmbed might be in other files
  success_criteria:
    - "Finds all trait implementations"
    - "Distinguishes trait def from impls"
  baseline_expected_calls: 5-7
  cs_expected_calls: 1-2

- id: cross-003
  category: cross_file
  difficulty: hard
  task: "Identify all components that depend on the UserConfig structure"
  query_en: "UserConfig usage dependencies configuration"
  query_zh: "UserConfig 使用依赖项"
  semantic_weight: high
  exact_match_weight: medium
  cross_file: true
  expected_files: 8-12
  ground_truth_files:
    - "cs-models/src/user_config.rs"  # Definition
    - "cs-cli/src/main.rs"            # Usage in CLI
    - "cs-cli/src/mcp_server.rs"      # MCP integration
  success_criteria:
    - "Finds definition + all usages"
    - "Maps dependency relationships"
  baseline_expected_calls: 8-12
  cs_expected_calls: 2-3

- id: cross-004
  category: cross_file
  difficulty: very_hard
  task: "Map co-occurrence of 'rerank' and 'embedding' across the codebase"
  query_en: "rerank embedding interaction where used together"
  query_zh: "重排序和嵌入的交互使用"
  semantic_weight: very_high
  exact_match_weight: low
  cross_file: true
  expected_files: 5-10
  ground_truth_files:
    - "cs-embed/src/lib.rs"
    - "cs-engine/src/semantic_v3.rs"
    - "cs-cli/src/main.rs"
  success_criteria:
    - "Identifies co-occurrence patterns"
    - "Understands pipeline: embed → search → rerank"
  baseline_expected_calls: 10-15
  cs_expected_calls: 3-4

- id: cross-005
  category: cross_file
  difficulty: hard
  task: "Find all CLI commands and their handler functions"
  query_en: "CLI command argument handler function mapping"
  query_zh: "CLI命令参数和处理函数的映射"
  semantic_weight: high
  exact_match_weight: high
  cross_file: true
  expected_files: 3-8
  ground_truth_files:
    - "cs-cli/src/main.rs"
  success_criteria:
    - "Maps CLI args to handlers"
    - "Identifies command structure"
  baseline_expected_calls: 6-10
  cs_expected_calls: 2-3

# ============================================================================
# Category C: Architecture Understanding (Very Hard)
# ============================================================================

- id: arch-001
  category: architecture
  difficulty: very_hard
  task: "Explain the complete search engine architecture from entry to results"
  query_en: "search engine architecture components data flow"
  query_zh: "搜索引擎完整架构从入口到结果"
  semantic_weight: very_high
  exact_match_weight: low
  iterative: true
  gradient_descent: true
  expected_files: 20-30
  ground_truth_components:
    - "CLI entry point"
    - "Search mode selection"
    - "Embedding generation"
    - "Index querying"
    - "Result fusion (RRF)"
    - "Reranking"
    - "Output formatting"
  success_criteria:
    - "Identifies all major components"
    - "Understands data flow"
    - "Explains fusion strategy"
  baseline_expected_calls: 20-30
  cs_expected_calls: 6-8

- id: arch-002
  category: architecture
  difficulty: hard
  task: "Understand how model selection and configuration works"
  query_en: "model selection configuration system workflow"
  query_zh: "模型选择和配置系统工作流程"
  semantic_weight: very_high
  exact_match_weight: medium
  iterative: true
  expected_files: 8-15
  ground_truth_components:
    - "Model registry"
    - "User configuration"
    - "CLI arguments"
    - "Default fallback"
  success_criteria:
    - "Understands priority: CLI > Config > Defaults"
    - "Maps model aliases"
  baseline_expected_calls: 12-18
  cs_expected_calls: 4-5

- id: arch-003
  category: architecture
  difficulty: very_hard
  task: "Trace the index building pipeline from source files to search-ready index"
  query_en: "index building pipeline chunking embedding storage"
  query_zh: "索引构建管线从源文件到可搜索索引"
  semantic_weight: very_high
  exact_match_weight: low
  iterative: true
  gradient_descent: true
  expected_files: 15-25
  ground_truth_components:
    - "File discovery"
    - "Chunking (tree-sitter)"
    - "Embedding generation"
    - "Sidecar storage"
    - "Index metadata"
  success_criteria:
    - "Complete pipeline understanding"
    - "Chunking strategy clear"
  baseline_expected_calls: 20-25
  cs_expected_calls: 6-8

- id: arch-004
  category: architecture
  difficulty: hard
  task: "Understand the MCP (Model Context Protocol) integration architecture"
  query_en: "MCP integration architecture server protocol"
  query_zh: "MCP集成架构服务器协议"
  semantic_weight: very_high
  exact_match_weight: medium
  iterative: true
  expected_files: 10-15
  ground_truth_files:
    - "cs-cli/src/mcp_server.rs"
    - "cs-cli/src/mcp/"
  success_criteria:
    - "Understands MCP protocol"
    - "Maps tool definitions"
    - "Identifies session management"
  baseline_expected_calls: 12-15
  cs_expected_calls: 3-5

- id: arch-005
  category: architecture
  difficulty: very_hard
  task: "Map the entire error handling strategy across the codebase"
  query_en: "error handling strategy anyhow Result patterns"
  query_zh: "错误处理策略模式整体映射"
  semantic_weight: very_high
  exact_match_weight: medium
  cross_file: true
  iterative: true
  expected_files: 25-40
  ground_truth_patterns:
    - "Result<T> return types"
    - "anyhow::Result usage"
    - "? operator propagation"
    - "Error context addition"
  success_criteria:
    - "Identifies error types"
    - "Maps propagation patterns"
    - "Understands error contexts"
  baseline_expected_calls: 25-35
  cs_expected_calls: 8-10

# ============================================================================
# Category D: Refactoring Preparation (Medium-Hard)
# ============================================================================

- id: refactor-001
  category: refactoring
  difficulty: medium
  task: "Find all Jina API call sites for potential migration to local models"
  query_en: "Jina API calls JINA_API_KEY api.jina.ai HTTP requests"
  query_zh: "所有Jina API调用点"
  semantic_weight: medium
  exact_match_weight: high
  expected_files: 4-6
  ground_truth_files:
    - "cs-embed/src/jina_api.rs"
    - "cs-embed/src/jina_api_reranker.rs"
  success_criteria:
    - "Finds all API call sites"
    - "Distinguishes embedding vs reranking calls"
  baseline_expected_calls: 8-10
  cs_expected_calls: 2

- id: refactor-002
  category: refactoring
  difficulty: hard
  task: "Identify all hardcoded configuration values that should be in config file"
  query_en: "hardcoded constants configuration values default settings"
  query_zh: "硬编码配置值应该移到配置文件"
  semantic_weight: high
  exact_match_weight: low
  cross_file: true
  expected_files: 10-20
  success_criteria:
    - "Finds hardcoded defaults"
    - "Identifies candidates for config"
  baseline_expected_calls: 15-20
  cs_expected_calls: 4-6

- id: refactor-003
  category: refactoring
  difficulty: medium
  task: "Locate all string literals for i18n extraction"
  query_en: "string literals user-facing messages errors"
  query_zh: "所有字符串字面量用于国际化"
  semantic_weight: medium
  exact_match_weight: high
  expected_files: 15-25
  success_criteria:
    - "Finds user-facing strings"
    - "Excludes debug/internal strings"
  baseline_expected_calls: 12-18
  cs_expected_calls: 3-5

- id: refactor-004
  category: refactoring
  difficulty: hard
  task: "Find all uses of deprecated .unwrap() for safe error handling refactor"
  query_en: "unwrap expect panic error handling unsafe"
  query_zh: "所有unsafe的unwrap调用需要重构"
  semantic_weight: high
  exact_match_weight: high
  expected_files: 10-20
  success_criteria:
    - "Finds all unwrap() calls"
    - "Distinguishes safe vs unsafe usage"
  baseline_expected_calls: 8-12
  cs_expected_calls: 2-3

- id: refactor-005
  category: refactoring
  difficulty: very_hard
  task: "Prepare to extract TUI code into standalone library"
  query_en: "TUI code dependencies coupling standalone library"
  query_zh: "TUI代码提取为独立库的准备"
  semantic_weight: very_high
  exact_match_weight: medium
  cross_file: true
  expected_files: 15-25
  ground_truth_components:
    - "cs-tui/ directory"
    - "Dependencies on cs-core"
    - "CLI integration points"
  success_criteria:
    - "Maps all TUI dependencies"
    - "Identifies coupling points"
    - "Plans clean interfaces"
  baseline_expected_calls: 20-30
  cs_expected_calls: 6-8

# ============================================================================
# Category E: Multilingual Code Understanding (Very Hard)
# ============================================================================

- id: multi-001
  category: multilingual
  difficulty: very_hard
  task: "Find similar configuration patterns across Rust and TypeScript code"
  query_en: "configuration pattern loading saving Rust TypeScript"
  query_zh: "Rust和TypeScript中相似的配置模式"
  semantic_weight: very_high
  exact_match_weight: low
  multi_language: true
  expected_files: 10-15
  ground_truth_files:
    - "cs-models/src/user_config.rs"  # Rust
    - "cs-vscode/src/extension.ts"    # TypeScript
  success_criteria:
    - "Finds patterns in both languages"
    - "Identifies structural similarities"
  baseline_expected_calls: 18-25
  cs_expected_calls: 4-6

- id: multi-002
  category: multilingual
  difficulty: hard
  task: "Compare error handling approaches in Rust vs TypeScript extensions"
  query_en: "error handling try catch Result Rust TypeScript"
  query_zh: "Rust和TypeScript的错误处理对比"
  semantic_weight: very_high
  exact_match_weight: low
  multi_language: true
  expected_files: 12-20
  success_criteria:
    - "Identifies language-specific patterns"
    - "Maps Rust Result ↔ TypeScript try/catch"
  baseline_expected_calls: 15-22
  cs_expected_calls: 5-7

# ============================================================================
# Metadata
# ============================================================================
metadata:
  total_tasks: 25
  categories:
    simple_search: 5
    cross_file: 5
    architecture: 5
    refactoring: 5
    multilingual: 5
  difficulty_distribution:
    easy: 3
    medium: 7
    hard: 9
    very_hard: 6
  estimated_baseline_calls: 325-450
  estimated_cs_calls: 80-120
  expected_improvement: "70-75% reduction in tool calls"
